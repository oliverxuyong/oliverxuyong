{"ast":null,"code":"var _jsxFileName = \"/Users/oxu/react-vycxvv-proenglish/src/HighlightedSentence.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//import { findNonOverlappingLCS } from './MyLib.js';\n\nconst HighlightedSentence = ({\n  sentence,\n  matchedPos\n}) => {\n  const wordArray = sentence.split(' ');\n  //const nolcs_pos = findNonOverlappingLCS(sentence, text); //ordered as the same order of appearance in sentence.\n  //console.log('nolcs=', nolcs_pos);\n  const wordlist = wordArray.map((word, i) => {\n    //let returnvalue: JSX.Element;\n    if (matchedPos[i]) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sentence\",\n        style: {\n          color: 'red'\n        },\n        children: word + ' '\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sentence\",\n        children: word + ' '\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: wordlist\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = HighlightedSentence;\nexport default HighlightedSentence;\nvar _c;\n$RefreshReg$(_c, \"HighlightedSentence\");","map":{"version":3,"names":["HighlightedSentence","sentence","matchedPos","wordArray","split","wordlist","map","word","i","_jsxDEV","className","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/oxu/react-vycxvv-proenglish/src/HighlightedSentence.jsx"],"sourcesContent":["//import { findNonOverlappingLCS } from './MyLib.js';\n\n\nconst HighlightedSentence = ({ sentence, matchedPos }) => {\n  const wordArray = sentence.split(' ');\n  //const nolcs_pos = findNonOverlappingLCS(sentence, text); //ordered as the same order of appearance in sentence.\n  //console.log('nolcs=', nolcs_pos);\n  const wordlist = wordArray.map((word, i) => {\n    //let returnvalue: JSX.Element;\n        if (matchedPos[i]) {\n      return (\n        <p className=\"sentence\" style={{ color: 'red' }} key={i}>\n          {word + ' '}\n        </p>\n      );\n    } else {\n      return (\n        <p className=\"sentence\" key={i}>\n          {word + ' '}\n        </p>\n      );\n    }\n  });\n  return (\n    <div>\n      {wordlist}\n    </div>\n  );\n}\n\nexport default HighlightedSentence;\n"],"mappings":";;AAAA;;AAGA,MAAMA,mBAAmB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAW,CAAC,KAAK;EACxD,MAAMC,SAAS,GAAGF,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC;EACrC;EACA;EACA,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;IAC1C;IACI,IAAIN,UAAU,CAACM,CAAC,CAAC,EAAE;MACrB,oBACEC,OAAA;QAAGC,SAAS,EAAC,UAAU;QAACC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAC,QAAA,EAC7CN,IAAI,GAAG;MAAG,GADyCC,CAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEpD,CAAC;IAER,CAAC,MAAM;MACL,oBACER,OAAA;QAAGC,SAAS,EAAC,UAAU;QAAAG,QAAA,EACpBN,IAAI,GAAG;MAAG,GADgBC,CAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE3B,CAAC;IAER;EACF,CAAC,CAAC;EACF,oBACER,OAAA;IAAAI,QAAA,EACGR;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAAC,EAAA,GAzBKlB,mBAAmB;AA2BzB,eAAeA,mBAAmB;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}