{"ast":null,"code":"function findNonOverlappingLCS(text1, text2) {\n  // Split words ignoring punctuation and convert to lower case for case-insensitive comparison\n  const words1 = text1.toLowerCase().split(/[\\s,.!\"?;:()]+/) // Split by whitespace and punctuation\n  .filter(Boolean); // Remove empty strings\n  const words2 = text2.toLowerCase().split(/[\\s,.!?;:()]+/).filter(Boolean);\n  const dp = Array.from({\n    length: words1.length + 1\n  }, () => Array(words2.length + 1).fill(0));\n  //console.log('initial dp=', dp);\n\n  // Fill the dp table\n  for (let i = 1; i <= words1.length; i++) {\n    for (let j = 1; j <= words2.length; j++) {\n      if (words1[i - 1] === words2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n      } else {\n        dp[i][j] = 0;\n      }\n    }\n  }\n\n  // Function to extract LCS using the filled dp table, ensuring non-overlapping\n  function extractLCS() {\n    const results = [];\n    let used1 = Array(words1.length).fill(false);\n    let used2 = Array(words2.length).fill(false);\n    for (let len = Math.max(...dp.flat()); len > 0; len--) {\n      // Start with the longest possible LCS\n      for (let i = 1; i <= words1.length; i++) {\n        for (let j = 1; j <= words2.length; j++) {\n          if (dp[i][j] === len && !used1[i - 1] && !used2[j - 1]) {\n            let subsequence = [];\n            let k = len;\n            let x = i,\n              y = j;\n            while (k > 0) {\n              subsequence.unshift(words1[x - 1]); // Build the subsequence backwards\n              used1[x - 1] = true; // Mark used in text1\n              used2[y - 1] = true; // Mark used in text2\n              x--;\n              y--;\n              k--;\n            }\n            results.push(subsequence.join(' '));\n            break; // Break to ensure non-overlapping\n          }\n        }\n      }\n    }\n    console.log('text1=', text1);\n    console.log('words1=', words1);\n    console.log('used1=', used1);\n    console.log('text2=', text2);\n    console.log('words2=', words2);\n    console.log('used2=', used2);\n    return [used1, used2]; //改为返回一个text中lcs词的位置数据，命中的为true\n  }\n  return extractLCS();\n}\n\n// Example usage\n//const text1 = 'The Quick, Brown fox jumps over the lazy Dog.';\n//const text2 = 'That quick dog! Jumps over the brown Fox.';\n//const lcsList = findNonOverlappingLCS(text1, text2);\n//console.log(lcsList);\n\nfunction numberToWords(num) {\n  if (num === 0) return 'zero';\n  const under20 = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\n  const tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\n  const chunks = ['thousand', 'million', 'billion', 'trillion'];\n  let words = [];\n  function toWords(n, scaleIndex) {\n    let result = '';\n    let part = [];\n    if (n > 99) {\n      part.push(under20[Math.floor(n / 100) - 1] + ' hundred');\n      n %= 100;\n    }\n    if (n > 19) {\n      part.push(tens[Math.floor(n / 10)]);\n      n %= 10;\n    }\n    if (n > 0) {\n      part.push(under20[n - 1]);\n    }\n    result = part.join(' ');\n    // Insert \"and\" between hundred and the last part if the last part exists\n    if (part.length > 1) {\n      result = part[0] + ' and ' + part.slice(1).join(' ');\n    }\n    return result ? result + (scaleIndex ? ' ' + chunks[scaleIndex - 1] : '') : '';\n  }\n\n  // Split number by thousands; handle each chunk\n  let scaleIndex = 0;\n  while (num > 0) {\n    let chunk = num % 1000;\n    if (chunk > 0) {\n      words.unshift(toWords(chunk, scaleIndex));\n    }\n    num = Math.floor(num / 1000);\n    scaleIndex++;\n  }\n  return words.join(' ').trim();\n}\n\n// Example Usage\n//console.log(numberToWords(123)); // Outputs: \"one hundred twenty three\"\n//console.log(numberToWords(12345)); // Outputs: \"twelve thousand three hundred forty five\"\n//console.log(numberToWords(1234567)); // Outputs: \"one million two hundred thirty four thousand five hundred sixty seven\"\n\nfunction replaceNumbersWithWords(text) {\n  // Handle complex expressions with units and decimals but skip typical years\n  text = text.replace(/\\b(\\d{1,3}(?:\\.\\d+)?|\\d{5,}(?:\\.\\d+)?|\\d+\\.\\d+)(?!\\d)(?:\\s?(billion|million|thousand))?\\b/g, function (match, number, scale) {\n    if (/^\\d{4}$/.test(number) && !scale) {\n      // Skip typical year format\n      return match;\n    }\n    let parts = number.split('.');\n    let integerPart = numberToWords(parseInt(parts[0]));\n    let decimalPart = parts[1] ? parts.slice(1).join('').split('').map(n => numberToWords(parseInt(n))).join(' ') : '';\n    let scaleText = scale ? scale.trim() : '';\n    if (decimalPart.length > 0) {\n      return `${integerPart} point ${decimalPart}${scaleText ? ' ' + scaleText : ''}`;\n    } else {\n      return `${integerPart}${scaleText ? ' ' + scaleText : ''}`;\n    }\n  });\n  return text;\n}\n\n// Example Usage\n//const paragraph =\n//  'The area was bought for 3.5 million dollars in 1990. In 2020, the population reached 7.86 billion.';\n//const convertText = replaceNumbersWithWords(paragraph);\n//console.log(convertText);\n\nfunction textToNumber(text) {\n  const numWords = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n    thirteen: 13,\n    fourteen: 14,\n    fifteen: 15,\n    sixteen: 16,\n    seventeen: 17,\n    eighteen: 18,\n    nineteen: 19,\n    twenty: 20,\n    thirty: 30,\n    forty: 40,\n    fifty: 50,\n    sixty: 60,\n    seventy: 70,\n    eighty: 80,\n    ninety: 90\n  };\n  const multiplier = {\n    hundred: 100,\n    thousand: 1000,\n    million: 1000000\n  };\n  let numbers = text.toLowerCase().split(/ and |,|-|\\s/).filter(Boolean);\n  let result = 0,\n    currentNum = 0;\n  numbers.forEach(function (word) {\n    if (multiplier[word]) {\n      currentNum *= multiplier[word];\n    } else {\n      if (currentNum === 0) currentNum = numWords[word];else currentNum += numWords[word];\n    }\n    if (word === 'hundred' && currentNum !== 0) {\n      result += currentNum;\n      currentNum = 0;\n    }\n  });\n  result += currentNum;\n  return result;\n}\nfunction replaceTextualNumbers(text) {\n  // Regular expression to identify possible number words\n  const numberPattern = /((?:zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|hundred|thousand|million)\\s*)+/gi;\n\n  // Replace identified number words with their numeral equivalents\n  return text.replace(numberPattern, function (match) {\n    return textToNumber(match);\n  });\n}\n\n// Example Usage\n//let sampleText =\n// 'The Key Bridge took five years to construct in the 1970s, but now, crews are rushing to dismantle the remnants of the fallen Baltimore landmark. ';\n//let convertedText = replaceTextualNumbers(sampleText);\n//console.log(convertedText);\nexport { findNonOverlappingLCS, replaceNumbersWithWords };","map":{"version":3,"names":["findNonOverlappingLCS","text1","text2","words1","toLowerCase","split","filter","Boolean","words2","dp","Array","from","length","fill","i","j","extractLCS","results","used1","used2","len","Math","max","flat","subsequence","k","x","y","unshift","push","join","console","log","numberToWords","num","under20","tens","chunks","words","toWords","n","scaleIndex","result","part","floor","slice","chunk","trim","replaceNumbersWithWords","text","replace","match","number","scale","test","parts","integerPart","parseInt","decimalPart","map","scaleText","textToNumber","numWords","zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety","multiplier","hundred","thousand","million","numbers","currentNum","forEach","word","replaceTextualNumbers","numberPattern"],"sources":["/Users/oxu/react-vycxvv-proenglish/src/MyLib.js"],"sourcesContent":["function findNonOverlappingLCS(text1, text2) {\n  // Split words ignoring punctuation and convert to lower case for case-insensitive comparison\n  const words1 = text1\n    .toLowerCase()\n    .split(/[\\s,.!\"?;:()]+/) // Split by whitespace and punctuation\n    .filter(Boolean); // Remove empty strings\n  const words2 = text2\n    .toLowerCase()\n    .split(/[\\s,.!?;:()]+/)\n    .filter(Boolean);\n  const dp = Array.from({ length: words1.length + 1 }, () =>\n    Array(words2.length + 1).fill(0)\n  );\n  //console.log('initial dp=', dp);\n\n  // Fill the dp table\n  for (let i = 1; i <= words1.length; i++) {\n    for (let j = 1; j <= words2.length; j++) {\n      if (words1[i - 1] === words2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n      } else {\n        dp[i][j] = 0;\n      }\n    }\n  }\n\n  // Function to extract LCS using the filled dp table, ensuring non-overlapping\n  function extractLCS() {\n    const results = [];\n    let used1 = Array(words1.length).fill(false);\n    let used2 = Array(words2.length).fill(false);\n\n    for (let len = Math.max(...dp.flat()); len > 0; len--) {\n      // Start with the longest possible LCS\n      for (let i = 1; i <= words1.length; i++) {\n        for (let j = 1; j <= words2.length; j++) {\n          if (dp[i][j] === len && !used1[i - 1] && !used2[j - 1]) {\n            let subsequence = [];\n            let k = len;\n            let x = i,\n              y = j;\n\n            while (k > 0) {\n              subsequence.unshift(words1[x - 1]); // Build the subsequence backwards\n              used1[x - 1] = true; // Mark used in text1\n              used2[y - 1] = true; // Mark used in text2\n              x--;\n              y--;\n              k--;\n            }\n\n            results.push(subsequence.join(' '));\n            break; // Break to ensure non-overlapping\n          }\n        }\n      }\n    }\n\n    console.log('text1=', text1);\n    console.log('words1=', words1);\n    console.log('used1=', used1);\n    console.log('text2=', text2);\n    console.log('words2=', words2);\n    console.log('used2=', used2);\n    return [used1,used2]; //改为返回一个text中lcs词的位置数据，命中的为true\n  }\n\n  return extractLCS();\n}\n\n// Example usage\n//const text1 = 'The Quick, Brown fox jumps over the lazy Dog.';\n//const text2 = 'That quick dog! Jumps over the brown Fox.';\n//const lcsList = findNonOverlappingLCS(text1, text2);\n//console.log(lcsList);\n\nfunction numberToWords(num) {\n  if (num === 0) return 'zero';\n\n  const under20 = [\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n    'ten',\n    'eleven',\n    'twelve',\n    'thirteen',\n    'fourteen',\n    'fifteen',\n    'sixteen',\n    'seventeen',\n    'eighteen',\n    'nineteen',\n  ];\n  const tens = [\n    '',\n    '',\n    'twenty',\n    'thirty',\n    'forty',\n    'fifty',\n    'sixty',\n    'seventy',\n    'eighty',\n    'ninety',\n  ];\n  const chunks = ['thousand', 'million', 'billion', 'trillion'];\n\n  let words = [];\n\n  function toWords(n, scaleIndex) {\n    let result = '';\n    let part = [];\n\n    if (n > 99) {\n      part.push(under20[Math.floor(n / 100) - 1] + ' hundred');\n      n %= 100;\n    }\n    if (n > 19) {\n      part.push(tens[Math.floor(n / 10)]);\n      n %= 10;\n    }\n    if (n > 0) {\n      part.push(under20[n - 1]);\n    }\n\n    result = part.join(' ');\n    // Insert \"and\" between hundred and the last part if the last part exists\n    if (part.length > 1) {\n      result = part[0] + ' and ' + part.slice(1).join(' ');\n    }\n\n    return result\n      ? result + (scaleIndex ? ' ' + chunks[scaleIndex - 1] : '')\n      : '';\n  }\n\n  // Split number by thousands; handle each chunk\n  let scaleIndex = 0;\n  while (num > 0) {\n    let chunk = num % 1000;\n    if (chunk > 0) {\n      words.unshift(toWords(chunk, scaleIndex));\n    }\n    num = Math.floor(num / 1000);\n    scaleIndex++;\n  }\n\n  return words.join(' ').trim();\n}\n\n// Example Usage\n//console.log(numberToWords(123)); // Outputs: \"one hundred twenty three\"\n//console.log(numberToWords(12345)); // Outputs: \"twelve thousand three hundred forty five\"\n//console.log(numberToWords(1234567)); // Outputs: \"one million two hundred thirty four thousand five hundred sixty seven\"\n\nfunction replaceNumbersWithWords(text) {\n  // Handle complex expressions with units and decimals but skip typical years\n  text = text.replace(\n    /\\b(\\d{1,3}(?:\\.\\d+)?|\\d{5,}(?:\\.\\d+)?|\\d+\\.\\d+)(?!\\d)(?:\\s?(billion|million|thousand))?\\b/g,\n    function (match, number, scale) {\n      if (/^\\d{4}$/.test(number) && !scale) {\n        // Skip typical year format\n        return match;\n      }\n\n      let parts = number.split('.');\n      let integerPart = numberToWords(parseInt(parts[0]));\n      let decimalPart = parts[1]\n        ? parts\n            .slice(1)\n            .join('')\n            .split('')\n            .map((n) => numberToWords(parseInt(n)))\n            .join(' ')\n        : '';\n      let scaleText = scale ? scale.trim() : '';\n\n      if (decimalPart.length > 0) {\n        return `${integerPart} point ${decimalPart}${\n          scaleText ? ' ' + scaleText : ''\n        }`;\n      } else {\n        return `${integerPart}${scaleText ? ' ' + scaleText : ''}`;\n      }\n    }\n  );\n\n  return text;\n}\n\n// Example Usage\n//const paragraph =\n//  'The area was bought for 3.5 million dollars in 1990. In 2020, the population reached 7.86 billion.';\n//const convertText = replaceNumbersWithWords(paragraph);\n//console.log(convertText);\n\nfunction textToNumber(text) {\n  const numWords = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n    thirteen: 13,\n    fourteen: 14,\n    fifteen: 15,\n    sixteen: 16,\n    seventeen: 17,\n    eighteen: 18,\n    nineteen: 19,\n    twenty: 20,\n    thirty: 30,\n    forty: 40,\n    fifty: 50,\n    sixty: 60,\n    seventy: 70,\n    eighty: 80,\n    ninety: 90,\n  };\n\n  const multiplier = {\n    hundred: 100,\n    thousand: 1000,\n    million: 1000000,\n  };\n\n  let numbers = text\n    .toLowerCase()\n    .split(/ and |,|-|\\s/)\n    .filter(Boolean);\n  let result = 0,\n    currentNum = 0;\n\n  numbers.forEach(function (word) {\n    if (multiplier[word]) {\n      currentNum *= multiplier[word];\n    } else {\n      if (currentNum === 0) currentNum = numWords[word];\n      else currentNum += numWords[word];\n    }\n\n    if (word === 'hundred' && currentNum !== 0) {\n      result += currentNum;\n      currentNum = 0;\n    }\n  });\n\n  result += currentNum;\n  return result;\n}\n\nfunction replaceTextualNumbers(text) {\n  // Regular expression to identify possible number words\n  const numberPattern =\n    /((?:zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|hundred|thousand|million)\\s*)+/gi;\n\n  // Replace identified number words with their numeral equivalents\n  return text.replace(numberPattern, function (match) {\n    return textToNumber(match);\n  });\n}\n\n// Example Usage\n//let sampleText =\n// 'The Key Bridge took five years to construct in the 1970s, but now, crews are rushing to dismantle the remnants of the fallen Baltimore landmark. ';\n//let convertedText = replaceTextualNumbers(sampleText);\n//console.log(convertedText);\nexport { findNonOverlappingLCS, replaceNumbersWithWords };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}