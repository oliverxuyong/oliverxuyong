{"ast":null,"code":"var _jsxFileName = \"/Users/oxu/react-vycxvv-proenglish/src/SpokenText.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpokenText = ({\n  spokenText,\n  matchedPos\n}) => {\n  const wordArray = sentence.split(' ');\n  //const nolcs_pos = findNonOverlappingLCS(sentence, text); //ordered as the same order of appearance in sentence.\n  //console.log('nolcs=', nolcs_pos);\n  const wordlist = wordArray.map((word, i) => {\n    //let returnvalue: JSX.Element;\n    if (usedPos[i]) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sentence\",\n        style: {\n          color: 'red'\n        },\n        children: word + ' '\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sentence\",\n        children: word + ' '\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: wordlist\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = SpokenText;\nexport default SpokenText;\nvar _c;\n$RefreshReg$(_c, \"SpokenText\");","map":{"version":3,"names":["SpokenText","spokenText","matchedPos","wordArray","sentence","split","wordlist","map","word","i","usedPos","_jsxDEV","className","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/oxu/react-vycxvv-proenglish/src/SpokenText.jsx"],"sourcesContent":["\n\nconst SpokenText = ({ spokenText, matchedPos }) => {\n  const wordArray = sentence.split(' ');\n  //const nolcs_pos = findNonOverlappingLCS(sentence, text); //ordered as the same order of appearance in sentence.\n  //console.log('nolcs=', nolcs_pos);\n  const wordlist = wordArray.map((word, i) => {\n    //let returnvalue: JSX.Element;\n        if (usedPos[i]) {\n      return (\n        <p className=\"sentence\" style={{ color: 'red' }} key={i}>\n          {word + ' '}\n        </p>\n      );\n    } else {\n      return (\n        <p className=\"sentence\" key={i}>\n          {word + ' '}\n        </p>\n      );\n    }\n  });\n  return (\n    <div>\n      {wordlist}\n    </div>\n  );\n}\n\nexport default SpokenText;\n"],"mappings":";;AAEA,MAAMA,UAAU,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAW,CAAC,KAAK;EACjD,MAAMC,SAAS,GAAGC,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;EACrC;EACA;EACA,MAAMC,QAAQ,GAAGH,SAAS,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;IAC1C;IACI,IAAIC,OAAO,CAACD,CAAC,CAAC,EAAE;MAClB,oBACEE,OAAA;QAAGC,SAAS,EAAC,UAAU;QAACC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAC,QAAA,EAC7CP,IAAI,GAAG;MAAG,GADyCC,CAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEpD,CAAC;IAER,CAAC,MAAM;MACL,oBACER,OAAA;QAAGC,SAAS,EAAC,UAAU;QAAAG,QAAA,EACpBP,IAAI,GAAG;MAAG,GADgBC,CAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE3B,CAAC;IAER;EACF,CAAC,CAAC;EACF,oBACER,OAAA;IAAAI,QAAA,EACGT;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAAC,EAAA,GAzBKpB,UAAU;AA2BhB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}